// ==UserScript==
// @name            KoC Additional Throne Monitor
// @namespace       kba
// @description     Additional Throne Room Monitor for Kingdoms of Camelot - For use with Battle Console or Battle Monitor Lite
// @icon			https://kabam1-a.akamaihd.net/kingdomsofcamelot/fb/e2/src/img/nav/chrome_quest_over.png
// @include         *.kingdomsofcamelot.com/*main_src.php*
// @grant       	GM_getValue
// @grant       	GM_setValue
// @grant			GM_deleteValue
// @grant			GM_listValues
// @grant			GM_addStyle
// @grant			GM_log
// @grant			GM_xmlhttpRequest
// @grant			GM_getResourceText
// @grant			unsafeWindow
// @version         20140513b
// @releasenotes    <p>Choice of update URLs (Usersripts, Googlecode or Greasyfork)</p><p>Alternate sort order in Monitor (Range,Attack,Defence,Life,Speed,Accuracy,Load)</p><p>Link to profile from monitor window</p>
// ==/UserScript==

//	┌───────────────────────────────────────────────────────────────────────────────────────────────────────┐
//	│	This script can be found at http://code.google.com/p/koc-battle-console/							│
//	│	It is licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License:	│
//	│	http://creativecommons.org/licenses/by-nc-nd/3.0													│
//	│																										│
//	│	May 2014 Barbarossa69 (www.facebook.com/barbarossa69)												│
//	└───────────────────────────────────────────────────────────────────────────────────────────────────────┘

var Version = '20140513b';
var NameSpace = 'kba';

//Fix weird bug with koc game
if (window.self.location != window.top.location){
	if (window.self.location.href == window.parent.location.href){
		return; //If iframe source is same as the parent don't load script
	}
}

// Global Variables

var Options = {
	WinPos        	    : {},
	WinSize        	    : {},
	MonPos        	    : {},
	MonitorColours      : true,
	LastMonitored       : "",
	LastMonitoredUID    : 0,
	MonitorSound        : false,
	MonitorStartState   : false,
	AutoUpdates         : true,
	PVPOnly             : false,
	Volume              : 100,
	MonitorFontSize		: 11,
	UpdateLocation      : 0, // 0 - Userscripts, 1 - Googlecode, 2 - Greasyfork
	USPort              : 8080,
	AlternateSortOrder  : false,
};

var JSON2 = JSON; 

var mainPop;
var popMon;

var uW = unsafeWindow;
var Seed = unsafeWindow.seed;
var CM = unsafeWindow.cm;

var btStartupTimer = null;

var MonitorLooper = 0;
var MonitorInterval = 3;
var ResetMonitorCountDown = 900;
var MonitorCountDown = 0;
var SecondLooper = 1;
var MonitoringActive = false;
var MonitoringPaused = false;
var MonitorTimedOut = false;
var cText = ""; 
var LastUser = "";
var servermsg  = "server not responding";
var MonWidth=300;
var MonHeight=500;
var fontratio=1;

var FFVersion = getFirefoxVersion();

var GlobalEffects = [1,2,3,4,5,6,7,17,18,19,20,21,22,23,102,103,8,9,73];

var AttackEffects = [1,17,24,29,34,39,44,50,56,61,102];
var DefenceEffects = [2,18,25,30,35,40,45,51];
var LifeEffects = [3,19,26,31,36,41,46,52,104];
var RangeEffects = [5,21,37,42,58,63];
var SpeedEffects = [4,20,27,32,47,53,57,62];
var AccuracyEffects = [7,23,28,33,38,43,49,55,60,65];
var OtherCombatEffects = [8,9,13,14,15,16,73];
var OtherPVPEffects = [6,22,48,54,59,64];

var DebuffEffects = [17,18,19,20,22,21,23,29,39,50,54,61,30,40,51,31,41,52,42,63,64,32,53,62];

var AlternateSortOrder = [5,37,58,21,42,63,1,24,34,44,56,102,17,29,39,50,61,2,25,35,45,18,30,40,51,3,26,36,46,104,19,31,41,52,4,27,47,57,20,32,53,62,7,28,38,49,60,23,33,43,55,65,6,48,59,22,54,64];
 
var TitleBG = "https://kabam1-a.akamaihd.net/kingdomsofcamelot/fb/e2/src/img/modal/700_bars_4.png";
var PanelBG = "https://kabam1-a.akamaihd.net/kingdomsofcamelot/fb/e2/src/img/dialog_740_r2_c1.jpg";
var DivBG = "https://kabam1-a.akamaihd.net/kingdomsofcamelot/fb/e2/src/img/nav/resource_bar_ascension.png";

var RightArrow = "https://kabam1-a.akamaihd.net/kingdomsofcamelot/fb/e2/src/img/autoAttack/across_arrow.png";
var DownArrow = "https://kabam1-a.akamaihd.net/kingdomsofcamelot/fb/e2/src/img/autoAttack/down_arrow.png";

for (k in uW.cm.thronestats.effects) {
	if (AlternateSortOrder.indexOf(parseInt(k)) == -1) {
		AlternateSortOrder.push(parseInt(k));
	}
}

var HisStatEffects = [];
var MyStatEffects = [];
var LastTR = [];

var userInfo = {};
var rsltInfo = {};
var HTMLRegister = {};

var MonitorID = 0;

var GoogleCodeURL = 'koc-battle-console.googlecode.com/svn/trunk/KoCBattleMonitorAdditional.user.js'
var GreasyForkURL = 'greasyfork.org/scripts/889-koc-additional-throne-monitor/code/KoC Additional Throne Monitor.user.js'

if (typeof SOUND_FILES == 'undefined') var SOUND_FILES = new Object();
if (typeof SOUND_FILES.timeout == 'undefined'){
	SOUND_FILES.timeout = new Object();
	SOUND_FILES.timeout.MP3 = 'data:audio/mp3;base64,';
	SOUND_FILES.timeout.OGG = 'data:audio/ogg;base64,';
	SOUND_FILES.timeout.DEFAULT = '<span><object type="application/x-shockwave-flash" data="http://koc.god-like.org/power/swf/pdxminiplayer.swf" width="160" height="20"><param name="wmode" value="transparent" /><param name="movie" value="http://koc.god-like.org/power/swf/pdxminiplayer.swf" /><param name="flashvars" value="mp3=http://koc-power-tools.googlecode.com/svn/trunk/sounds/arrow.mp3&amp;autostart=1&amp;showtime=1&amp;volume=100" /></object></span>';
}
if (typeof SOUND_FILES.monitor == 'undefined'){
	SOUND_FILES.monitor = new Object();
	SOUND_FILES.monitor.MP3 = 'data:audio/mp3;base64,';
	SOUND_FILES.monitor.OGG = 'data:audio/ogg;base64,';
	SOUND_FILES.monitor.DEFAULT = '<span><object type="application/x-shockwave-flash" data="http://koc.god-like.org/power/swf/pdxminiplayer.swf" width="160" height="20"><param name="wmode" value="transparent" /><param name="movie" value="http://koc.god-like.org/power/swf/pdxminiplayer.swf" /><param name="flashvars" value="mp3=http://koc-power-tools.googlecode.com/svn/trunk/sounds/DoorBell.mp3&amp;autostart=1&amp;showtime=1&amp;volume=100" /></object></span>';
}

// Functions

function btStartup (){
	clearTimeout (btStartupTimer);
	var metc = getClientCoords(document.getElementById('main_engagement_tabs'));
	if (metc.width==null || metc.width==0){
		btStartupTimer = setTimeout (btStartup, 2000);
		return;
	}

	readOptions();	   

	Seed = uW.seed;

	Options.WinSize.x = 400;
	Options.WinSize.y = 110;
	DefaultWindowPos('WinPos','main_engagement_tabs');
  
	var styles = '.xtab {padding-right: 5px; border:none; background:none; white-space:nowrap;}\
				.xtabHD {padding-right: 5px; border-bottom:1px solid #888888; background:none; white-space:nowrap;font-weight:bold;font-size:11px;color:#888888;margin-left:10px;margin-right:10px;margin-top:5px;margin-bottom:5px;vertical-align:text-top;align:left}\
				.xtabBR {padding-right: 5px; border:none; background:none;}\
				.xtabBRTop {padding-right: 5px; border:none; background:none;vertical-align:top;}\
				tr.btPopupTop td {background: url("' + TitleBG + '") no-repeat scroll -10px -10px transparent; border:1px solid #000000; height: 21px;  padding:0px; color:#FFFFFF;}\
				.btPopMain       {background: url("' + PanelBG + '") no-repeat scroll -10px -50px transparent; border:1px solid #000000; -moz-box-shadow:inset 0px 0px 10px #6a6a6a; -moz-border-radius-bottomright: 20px; -moz-border-radius-bottomleft: 20px; border-bottom-right-radius: 20px; border-bottom-left-radius: 20px; font-size:11px;}\
				.btMonitor_btPopMain { font-size:'+Options.MonitorFontSize+'px;}\
				.btPopup         {border:5px ridge #666; opacity:0.9; -moz-border-radius:25px; border-radius:25px; -moz-box-shadow: 1px 1px 5px #000000;}\
				.btSelector		 {font-size:11px; }\
				.btInput		 {font-size:10px; }\
				.divHide         {display:none}\
				.divHeader		 {background:url("' + DivBG + '") no-repeat scroll -185px transparent;height: 16px;border-bottom:0px solid #000000;font-weight:bold;font-size:11px;opacity:0.75;margin-left:0px;margin-right:0px;margin-top:1px;margin-bottom:0px;padding-top:4px;padding-right:10px;vertical-align:text-top;align:left}\
				.btButton:Hover  {color:#FFFF80;}\
				.oddRow          {background: rgba(0,0,0,0.1);}\
				.evenRow         {background: rgba(0,0,0,0);}\
				.divLink         {color:#000;text-decoration:none;}\
				.divLink:Hover   {color:#000;text-decoration:none;}\
				.divLink:Active  {color:#000;text-decoration:none;}\
				div.ErrText      {color:#FF0000;}';
			
	mainPop = new CPopup ('btMain_'+NameSpace, Options.WinPos.x, Options.WinPos.y, Options.WinSize.x, Options.WinSize.y, true, 
		function (){saveOptions();});

	mainPop.getTopDiv().innerHTML = '<DIV align=center><B>Battle Monitor (Additional)</B></DIV>';

	m = '<STYLE>'+ styles +'</style>';
  
	m += '<div id="btMain_'+NameSpace+'_content">';
	m += '<br>';
	m += '<div align="center">&nbsp;&nbsp;Enemy:&nbsp;<INPUT id=btPlayer_'+NameSpace+' size=20 type=text value="'+Options.LastMonitored+'"/>&nbsp;<a id=btPlayerSubmit_'+NameSpace+' class="inlineButton btButton blue20"><span>Monitor</span></a>&nbsp;<a id=btUIDSubmit_'+NameSpace+' class="inlineButton btButton blue20"><span>UID</span></a></div>';
	m += '<div class="ErrText" align="center" id=btplayErr_'+NameSpace+'>&nbsp;</div>';
	m += '<div class="divHeader" align="right"><a id=btOptionLink_'+NameSpace+' class=divLink >OPTIONS&nbsp;<img id=btOptionArrow_'+NameSpace+' height="10" src="'+RightArrow+'"></a></div>';
	m += '<div id=btOption_'+NameSpace+' class=divHide><TABLE width="100%">';
	m += '<TR><TD class=xtab>&nbsp;</td><td class=xtab><INPUT id=SoundChk_'+NameSpace+' type=checkbox /></td><td class=xtab>Use sound alerts on monitor</td></tr>';
    m += '<TR id=btSoundOpts_'+NameSpace+' class="divHide"><TD colspan=2 class=xtab>&nbsp;</td><TD align=right class=xtab><TABLE cellpadding=0 cellspacing=0><TR valign=middle><TD class=xtab>Volume&nbsp;</td><TD class=xtab><SPAN id=btVolSlider_'+NameSpace+'></span></td><TD align=right id=btVolOut_'+NameSpace+' style="width:30px;">0</td></tr></table></td></tr>';
	m += '<TR><TD class=xtab>&nbsp;</td><td class=xtab>&nbsp;</td><td class=xtab>Font size: ' + htmlSelector({8: 8, 9: 9, 10: 10, 11: 11}, Options.MonitorFontSize, 'id=btMonitorFont_'+NameSpace+' class=btInput') + '</td></tr>';
	m += '<TR><TD class=xtab>&nbsp;</td><td class=xtab><INPUT id=MonitorColoursChk_'+NameSpace+' type=checkbox /></td><td class=xtab>Use different colours in monitor window</td></tr>';
	m += '<TR><TD class=xtab>&nbsp;</td><td class=xtab><INPUT id=PVPOnlyChk_'+NameSpace+' type=checkbox /></td><td class=xtab>Show PVP effects only</td></tr>';
	m += '<TR><TD class=xtab>&nbsp;</td><td class=xtab><INPUT id=AlternateSortOrderChk_'+NameSpace+' type=checkbox /></td><td class=xtab>Alternate sort order</td></tr>';
	m += '<TR><TD class=xtab>&nbsp;</td><td class=xtab><INPUT id=AutoUpdateChk_'+NameSpace+' type=checkbox /></td><td class=xtab>Automatically check for script updates&nbsp;&nbsp;<a id=btUpdateCheck_'+NameSpace+' class="inlineButton btButton brown11"><span>Check Now</span></a></td></tr>';
	m += '<TR><TD class=xtab>&nbsp;</td><TD class=xtab>&nbsp;</td><td class=xtab><input id=btUS_'+NameSpace+' type=radio name=btuploc_'+NameSpace+' '+((Options.UpdateLocation==0)?'CHECKED':'')+'>Userscripts&nbsp;<INPUT class="btInput" style="width:30px;" id="btUSPort_'+NameSpace+'" type=text maxlength=6 value="'+Options.USPort+'">&nbsp;&nbsp;<input id=btGC_'+NameSpace+' type=radio name=btuploc_'+NameSpace+' '+((Options.UpdateLocation==1)?'CHECKED':'')+'>Googlecode&nbsp;&nbsp;<input id=btGF_'+NameSpace+' type=radio name=btuploc_'+NameSpace+' '+((Options.UpdateLocation==2)?'CHECKED':'')+'>Greasyfork</td></tr>';
	m += '</table></div>';
	m += '<div align="center" style="font-size:10px;opacity:0.3;">Version '+Version+'</div></div>';
  
	mainPop.getMainDiv().innerHTML = m;
  	  
	window.addEventListener('unload', onUnload, false);
	document.getElementById('btPlayerSubmit_'+NameSpace).addEventListener ('click', MonitorTRClick, false);
	document.getElementById('btUIDSubmit_'+NameSpace).addEventListener ('click', UIDClick, false);
	document.getElementById('btUpdateCheck_'+NameSpace).addEventListener ('click', function() {AutoUpdater.call(true,true);}, false);
	document.getElementById('btPlayer_'+NameSpace).addEventListener ('keypress', function(e) {if ( e.which == 13)  document.getElementById('btPlayerSubmit_'+NameSpace).click();}, false);
	document.getElementById('btPlayer_'+NameSpace).addEventListener ('focus', function (){setError('&nbsp;');}, false);

	document.getElementById('btOptionLink_'+NameSpace).addEventListener ('click', function () {ToggleDivDisplay("btMain_"+NameSpace,110,400,"btOption_"+NameSpace)}, false);

	document.getElementById('btPlayerSubmit_'+NameSpace).addEventListener('mousedown',function(me) {ResetWindowPos (me,'btPlayerSubmit_'+NameSpace,popMon);}, true);  
  
	ToggleOption ('SoundChk_'+NameSpace, 'MonitorSound', SoundToggle);
	SoundToggle ();
	
	document.getElementById('btMonitorFont_'+NameSpace).addEventListener('change', ChangeFontSize, false);

	ToggleOption ('MonitorColoursChk_'+NameSpace, 'MonitorColours');
	ToggleOption ('PVPOnlyChk_'+NameSpace, 'PVPOnly');
	ToggleOption ('AlternateSortOrderChk_'+NameSpace, 'AlternateSortOrder');
	ToggleOption ('AutoUpdateChk_'+NameSpace, 'AutoUpdates');

	document.getElementById('btUSPort_'+NameSpace).addEventListener('keyup', function () {
		if (isNaN(document.getElementById('btUSPort_'+NameSpace).value)) { document.getElementById('btUSPort_'+NameSpace).value = 8080; }
			Options.USPort = document.getElementById('btUSPort_'+NameSpace).value;
			saveOptions();
		}, false);
	document.getElementById('btUS_'+NameSpace).addEventListener('change', function () {
		if (document.getElementById('btUS_'+NameSpace).checked) { Options.UpdateLocation = 0; saveOptions(); }
		}, false);
	document.getElementById('btGC_'+NameSpace).addEventListener('change', function () {
		if (document.getElementById('btGC_'+NameSpace).checked) { Options.UpdateLocation = 1; saveOptions(); }
		}, false);
	document.getElementById('btGF_'+NameSpace).addEventListener('change', function () {
		if (document.getElementById('btGF_'+NameSpace).checked) { Options.UpdateLocation = 2; saveOptions(); }
		}, false);

	VolSlider = new SliderBar (document.getElementById('btVolSlider_'+NameSpace), 200, 21, 0);
	VolSlider.setValue (Options.Volume/100);
	VolSlider.setChangeListener(VolumeChanged);
	VolumeChanged (Options.Volume/100);
  
	AddMainTabLink('BATTLE(2)', eventHideShow, mouseMainTab);
 
	addScript ('uwuwuwFunc = function (text){ eval (text);  }');  

	// position windows for the first time
 
	DefaultWindowPos('MonPos','btPlayerSubmit');
  
	AudioManager.init();

	// start main looper

	EverySecond ();

	// show things that were showing before refresh

	if (Options.MonitorStartState && (Options.LastMonitoredUID != 0)) {initMonitor(Options.LastMonitoredUID);}
	
	// Set to check for updates in 15 seconds
	
	if (Options.AutoUpdates && !trusted) setTimeout(function(){AutoUpdater.check();},15000); 
}

function ChangeFontSize(evt) {
	Options.MonitorFontSize = evt.target.value;
	setTimeout(function () {saveOptions ();},0); // get around GM_SetValue unsafeWindow error
	if (MonitoringActive && popMon) { popMon.show(false); popMon.destroy(); popMon = null; initMonitor(userInfo.userId,MonitoringPaused); }
}

function SoundToggle () {
	var dc = uW.jQuery('#btSoundOpts_'+NameSpace).attr('class');
	if (Options.MonitorSound) {if (dc.indexOf('divHide') >= 0) uW.jQuery('#btSoundOpts_'+NameSpace).attr('class','');}
	else {if (dc.indexOf('divHide') < 0) uW.jQuery('#btSoundOpts_'+NameSpace).attr('class','divHide');}
	ResetFrameSize('btMain_'+NameSpace,110,400);
}

function VolumeChanged (val) {
	document.getElementById('btVolOut_'+NameSpace).innerHTML = parseInt(val*100);
    Options.Volume = parseInt(val*100);
	saveOptions();
	if (AudioManager.player) {AudioManager.setVolume(1, Options.Volume);}
}

function DefaultWindowPos(OptPos,elem) {
	if ((Options[OptPos]==null) || (Options[OptPos].x==null) || (Options[OptPos].x=='') || (isNaN(Options[OptPos].x))) {
		var c = getClientCoords (document.getElementById(elem));
		Options[OptPos].x = c.x+4;
		Options[OptPos].y = c.y+c.height;
		saveOptions ();
	}
}

function ResetFrameSize(prefix,minheight,minwidth) {
	h = document.getElementById(prefix+'_bar').clientHeight + document.getElementById(prefix+'_content').clientHeight;
	if (h < minheight) h = minheight;
	uW.jQuery('#'+prefix+'_outer').css('height',h+10);

	w = document.getElementById(prefix+'_content').clientWidth;
	w2 = document.getElementById(prefix+'_outer').clientWidth;
	if (w < minwidth) w = minwidth;
	if (w2 < w) // I don't know why I need this.. must look at this later to try and get it to shrink again
		uW.jQuery('#'+prefix+'_outer').css('width',w+10);
}

function ToggleDivDisplay(form,h,w,div) {
	var dc = uW.jQuery('#'+div).attr('class');
	if (dc) {
		if (dc.indexOf('divHide') >= 0) {
			uW.jQuery('#'+div).attr('class','');
			uW.jQuery('#'+div+'Arrow').attr('src',DownArrow);
		}	
	}
	else
	{
		uW.jQuery('#'+div).attr('class','divHide');
		uW.jQuery('#'+div+'Arrow').attr('src',RightArrow);
	}
	ResetFrameSize(form,h,w);
}

function EverySecond () {

	SecondLooper = SecondLooper+1;
	
	/* If Monitoring active, then refresh TR, or maintain loop to refresh player stats */

	if (MonitoringActive && popMon) {
		setTimeout(function() {MonitorTRLoop();},0);
	}

	setTimeout(EverySecond,1000);
}

function ToggleOption (checkboxId, optionName, callOnChange) {
	var checkbox = document.getElementById(checkboxId);
	if (Options[optionName])
		checkbox.checked = true;
	checkbox.addEventListener ('change', new eventHandler(checkboxId, optionName, callOnChange).handler, false);

	function eventHandler (checkboxId, optionName, callOnChange){
		this.handler = handler;
		var optName = optionName;
		var callback = callOnChange;
		function handler(event){
			Options[optionName] = this.checked;
			saveOptions();
			if (callback != null)
			callback (this.checked);
		}	  
	}
}

function AddMainTabLink(text, eventListener, mouseListener) {
	var a=document.createElement('a');
	a.className='button20';
	a.innerHTML='<span style="color: #ff6">'+ text +'</span>';
  
	a.id = 'btTab_'+NameSpace;
	a.className='tab';

	var tabs=document.getElementById('main_engagement_tabs');
	if(!tabs) {
		tabs=document.getElementById('topnav_msg');
		if (tabs)
			tabs=tabs.parentNode;
	}
	if (tabs) {
		var e = tabs.parentNode;
		var gmTabs = null;
		for (var i=0; i<e.childNodes.length; i++){
			var ee = e.childNodes[i];
			if (ee.tagName && ee.tagName=='DIV' && ee.className=='tabs_engagement' && ee.id!='main_engagement_tabs'){
				gmTabs = ee;
				break;
			}
		}
		if (gmTabs == null){
			gmTabs = document.createElement('div');
			gmTabs.className='tabs_engagement';
			tabs.parentNode.insertBefore (gmTabs, tabs);
			gmTabs.style.whiteSpace='nowrap';
			gmTabs.style.width='735px';
			gmTabs.lang = 'en_PT';
		}
		if (gmTabs.firstChild)
			gmTabs.insertBefore (a, gmTabs.firstChild);
		else
			gmTabs.appendChild(a);
		a.addEventListener('click',eventListener, false);
		if (mouseListener != null)
			a.addEventListener('mousedown',mouseListener, true);
		return a;
	}
	return null;
}

/********************************* STANDARD FUNCTIONS *****************************/

var AudioManager = {
	player: null,
	volume: 100,
	type: 'html5',
	alertdiv: null,
	init: function (){
		var t = AudioManager;
		if ( !! document.createElement("audio").canPlayType) {
			t.player = new Audio();
			t.type = 'html5';
			t.player.addEventListener("ended", function () {
				t.player.currentTime = 0
			}, false);
			t.setVolume(t.volume);
		} else {
			t.creatediv();
			t.type = 'swf';
		}
	},
	setVolume: function(vol){
		var t = AudioManager;
		t.volume = vol;
		t.player.volume = t.volume * 0.01;
	},
	play: function(){
		var t = AudioManager;
		if(t.type == 'html5'){
			if (!t.player.paused) {
				t.stop();
			}
			t.player.play();
		} else {
			t.alertdiv.innerHTML = t.source;
		}
	},
	stop: function(){
		var t = AudioManager;
		if(t.type == 'html5'){
			t.player.pause();
			if (t.player.readyState === 4) {
				t.player.currentTime = 0
			}
		} else {
			t.alertdiv.innerHTML = '<b style=\'color: rgb(165, 102, 49); font-size: 9px;\'>Audio Alert Played</b>';
		}
	},
	pause: function(){
		var t = AudioManager;
		t.player.pause();
	},
	setSource: function(src){
		var t = AudioManager;
		if(t.type == 'html5'){
			t.player.src = src.OGG;
			t.source = src.OGG;
		} else
			t.source = src.DEFAULT;
	},
	toggleMute: function () {
		var t = AudioManager;
		t.player.muted = !t.player.muted;
	},
	creatediv : function(){
		var t = AudioManager;
		var div = document.getElementsByTagName('div');
		for (var i = 0; i < div.length - 1; i++)
			if (div[i].className == 'mod_comm_forum')
				e = div[i];
		t.alertdiv = document.createElement("span");
		e.appendChild(t.alertdiv);
	},
}

var WinManager = {
	wins : {},    // prefix : CPopup obj

	get : function (prefix){
		var t = WinManager;
		return t.wins[prefix];
	},
  
	add : function (prefix, pop){
		var t = WinManager;
		t.wins[prefix] = pop;
		if (uW.cpopupWins == null)
		uW.cpopupWins = {};
		uW.cpopupWins[prefix] = pop;
	},
  
	delete : function (prefix){
		var t = WinManager;
		delete t.wins[prefix];
		delete uW.cpopupWins[prefix];
	}    
}

function parseIntNan (n){
	x = parseInt(n, 10);
	if (isNaN(x))
		return 0;
	return x;
}

function parseIntCommas (n){
	n = n.split(',');
	n = n.join('');
	x = parseInt(n, 10);
	if (isNaN(x))
		return 0;
	return x;
}

function parseIntZero (n){
	n = n.trim();
	if (n == '')
		return 0;
	return parseInt(n, 10);
}

function isNaNCommas (n){
	n = n.split(',');
	n = n.join('');
	return isNaN(n);
}

// value is 0 to 1.0
function SliderBar (container, width, height, value, classPrefix, margin){
  var self = this;
  this.listener = null;
  if (value==null)
    value = 0;
  if (!margin)
    margin = parseInt(width*.05);
  this.value = value;
  if (width<20) width=20;
  if (height<5) height=5;
  if (classPrefix == null){
    classPrefix = 'slider';
    var noClass = true;
  }    
  var sliderHeight = parseInt(height/2);
  var sliderTop = parseInt(height/4);
  this.sliderWidth = width - (margin*2);
    
  this.div = document.createElement ('div');
  this.div.style.height = height +'px';
  this.div.style.width = width +'px';
  this.div.className = classPrefix +'Cont';
  if (noClass)
    this.div.style.backgroundColor='#ddd';
  
  this.slider = document.createElement ('div');
  this.slider.setAttribute ('style', 'position:relative;');
  this.slider.style.height = sliderHeight + 'px'
  this.slider.style.top = sliderTop + 'px';
  this.slider.style.width = this.sliderWidth +'px';
  this.slider.style.left = margin +'px';   /////
  this.slider.className = classPrefix +'Bar';
  this.slider.draggable = true;
  if (noClass)
    this.slider.style.backgroundColor='#fff';
  
  this.sliderL = document.createElement ('div');
  this.sliderL.setAttribute ('style', 'width:100px; height:100%; position:relative;');
  this.sliderL.className = classPrefix +'Part';
  this.sliderL.draggable = true;
  if (noClass)
    this.sliderL.style.backgroundColor='#0c0';
  
  this.knob = document.createElement ('div');
  this.knob.setAttribute ('style', 'width:3px; position:relative; left:0px; background-color:#222;');
  this.knob.style.height = height +'px';
  this.knob.style.top = (0-sliderTop) +'px';
  this.knob.className = classPrefix +'Knob';
  this.knob.draggable = true;
  this.slider.appendChild(this.sliderL);
  this.sliderL.appendChild (this.knob);
  this.div.appendChild (this.slider);
  container.appendChild (this.div);
  this.div.addEventListener('mousedown',  mouseDown, false);

  this.getValue = function (){
    return self.value;
  }

  this.setValue = function (val){   // todo: range check
    var relX = (val * self.sliderWidth);
    self.sliderL.style.width = relX + 'px';
    self.knob.style.left =  relX + 'px';
    self.value = val;
    if (self.listener)
      self.listener(self.value);
  }
  
  this.setChangeListener = function (listener){
    self.listener = listener;
  }

  function moveKnob (me){
    var relX = me.clientX - self.divLeft;
    if (relX < 0)
      relX = 0;
    if (relX > self.sliderWidth)
      relX = self.sliderWidth;
    self.knob.style.left = (relX - (self.knob.clientWidth/2) ) +'px';   // - half knob width !?!?
    self.sliderL.style.width = relX + 'px';
    self.value =  relX / self.sliderWidth; 
    if (self.listener)
      self.listener(self.value);
  }
  function doneMoving (){
    self.div.removeEventListener('mousemove', mouseMove, true);
    document.removeEventListener('mouseup', mouseUp, true);
  }
  function mouseUp (me){
    moveKnob (me);
    doneMoving();
  }
  
  function mouseDown(me){
    var e = self.slider;
    self.divLeft = 0;
    while (e.offsetParent){   // determine actual clientX
      self.divLeft += e.offsetLeft;
      e = e.offsetParent;
    }
    moveKnob (me);
    document.addEventListener('mouseup',  mouseUp, true);
    self.div.addEventListener('mousemove',  mouseMove, true);
  }
  function mouseMove(me){
    moveKnob (me);
  }
}

// creates a 'popup' div
// prefix must be a unique (short) name for the popup window
function CPopup (prefix, x, y, width, height, enableDrag, onClose) {
  var pop = WinManager.get(prefix);
  if (pop){
    pop.show (false);
    return pop;
  }
  this.BASE_ZINDEX = 111111;

  // protos ...
  this.show = show;
  this.toggleHide = toggleHide;
  this.getTopDiv = getTopDiv;
  this.getMainDiv = getMainDiv;
  this.getLayer = getLayer;
  this.setLayer = setLayer;
  this.setEnableDrag = setEnableDrag;
  this.getLocation = getLocation;
  this.setLocation = setLocation;
  this.getDimensions = getDimensions;
  this.setDimensions = setDimensions;
  this.focusMe = focusMe;
  this.unfocusMe = unfocusMe;
  this.centerMe = centerMe;
  this.destroy = destroy;

  // object vars ...
  this.div = document.createElement('div');
  this.prefix = prefix;
  this.onClose = onClose;
  
  var t = this;
  this.div.className = 'btPopup '+ prefix +'_btPopup';
  this.div.id = prefix +'_outer';
  this.div.style.background = "#fff";
  this.div.style.zIndex = this.BASE_ZINDEX        // KOC modal is 100404 ?
  this.div.style.display = 'none';
  this.div.style.width = width + 'px';
  this.div.style.height = height + 'px';
  this.div.style.position = "absolute";
  this.div.style.top = y +'px';
  this.div.style.left = x + 'px';
  
  var m = '<TABLE cellspacing=0 width=100% height=100%><TR id="'+ prefix +'_bar" class="btPopupTop '+ prefix +'_btPopupTop"><TD style="-moz-border-radius-topleft: 20px; border-top-left-radius: 20px;" width=99%><SPAN id="'+ prefix +'_top"></span></td>\
      <TD id='+ prefix +'_X align=right valign=middle onmouseover="this.style.cursor=\'pointer\'" style="color:#fff; background:#400; border:1px solid #000000; font-weight:bold; font-size:14px; padding:0px 5px; -moz-border-radius-topright: 20px; border-top-right-radius: 20px;">X</td></tr>\
      <TR><TD height=100% valign=top class="btPopMain '+ prefix +'_btPopMain" colspan=2 id="'+ prefix +'_main"></td></tr></table>';
  document.body.appendChild(this.div);
  this.div.innerHTML = m;
  document.getElementById(prefix+'_X').addEventListener ('click', e_XClose, false);
  this.dragger = new CWinDrag (document.getElementById(prefix+'_bar'), this.div, enableDrag);
  
  this.div.addEventListener ('mousedown', e_divClicked, false);
  WinManager.add(prefix, this);
  
  function e_divClicked (){
    t.focusMe();
  }  
  function e_XClose (){
    t.show(false);
    if (t.onClose != null)
      t.onClose();
  }

  function focusMe (){
    t.setLayer(5);
    for (k in uW.cpopupWins){
      if (k != t.prefix)
        uW.cpopupWins[k].unfocusMe(); 
    }
  }
  function unfocusMe (){
    t.setLayer(-5);
  }
  function getLocation (){
    return {x: parseInt(this.div.style.left), y: parseInt(this.div.style.top)};
  }
  function getDimensions (){
    return {x: parseInt(this.div.style.width), y: parseInt(this.div.style.height)};
  }
  function setLocation (loc){
    t.div.style.left = loc.x +'px';
    t.div.style.top = loc.y +'px';
  }
  function setDimensions (loc){
    t.div.style.width = loc.x +'px';
    t.div.style.height = loc.y +'px';
  }
  function destroy (){
    document.body.removeChild(t.div);
    WinManager.delete (t.prefix);
  }
  function centerMe (parent){
    if (parent == null){
      var coords = getClientCoords(document.body);
    } else
      var coords = getClientCoords(parent);
    var x = ((coords.width - parseInt(t.div.style.width)) / 2) + coords.x;
    var y = ((coords.height - parseInt(t.div.style.height)) / 2) + coords.y;
    if (x<0)
      x = 0;
    if (y<0)
      y = 0;
    t.div.style.left = x +'px';
    t.div.style.top = y +'px';
  }
  function setEnableDrag (tf){
    t.dragger.setEnable(tf);
  }
  function setLayer(zi){
    t.div.style.zIndex = ''+ (this.BASE_ZINDEX + zi);
  }
  function getLayer(){
    return parseInt(t.div.style.zIndex) - this.BASE_ZINDEX;
  }
  function getTopDiv(){
    return document.getElementById(this.prefix+'_top');
  }
  function getMainDiv(){
    return document.getElementById(this.prefix+'_main');
  }
  function show(tf){
    if (tf){
      t.div.style.display = 'block';
      t.focusMe ();
    } else {
      t.div.style.display = 'none';
    }
    return tf;
  }
  function toggleHide(t){
    if (t.div.style.display == 'block') {
      return t.show (false);
    } else {
      return t.show (true);
    }
  }
}

function CWinDrag (clickableElement, movingDiv, enabled) {
  var t=this;
  this.setEnable = setEnable;
  this.setBoundRect = setBoundRect;
  this.lastX = null;
  this.lastY = null;
  this.enabled = true;
  this.moving = false;
  this.theDiv = movingDiv;
  this.body = document.body;
  this.ce = clickableElement;
  this.moveHandler = new CeventMove(this).handler;
  this.outHandler = new CeventOut(this).handler;
  this.upHandler = new CeventUp(this).handler;
  this.downHandler = new CeventDown(this).handler;
  this.clickableRect = null;
  this.boundRect = null;
  this.bounds = null;
  this.enabled = false;
  if (enabled == null)
    enabled = true;
  this.setEnable (enabled);

  function setBoundRect (b){    // this rect (client coords) will not go outside of current body
    this.boundRect = boundRect;
    this.bounds = null;
  }

  function setEnable (enable){
    if (enable == t.enabled)
      return;
    if (enable){
      clickableElement.addEventListener('mousedown',  t.downHandler, false);
      t.body.addEventListener('mouseup', t.upHandler, false);
    } else {
      clickableElement.removeEventListener('mousedown', t.downHandler, false);
      t.body.removeEventListener('mouseup', t.upHandler, false);
    }
    t.enabled = enable;
  }

  function CeventDown (that){
    this.handler = handler;
    var t = that;
    function handler (me){
      if (t.bounds == null){
        t.clickableRect = getClientCoords(clickableElement);
        t.bodyRect = getClientCoords(document.body);
        if (t.boundRect == null)
          t.boundRect = t.clickableRect;
        t.bounds = {top:10-t.clickableRect.height, bot:t.bodyRect.height-25, left:40-t.clickableRect.width, right:t.bodyRect.width-25};
      }
      if (me.button==0 && t.enabled){
        t.body.addEventListener('mousemove', t.moveHandler, true);
        t.body.addEventListener('mouseout', t.outHandler, true);
        t.lastX = me.clientX;
        t.lastY = me.clientY;
        t.moving = true;
      }
    }
  }

  function CeventUp  (that){
    this.handler = handler;
    var t = that;
    function handler (me){
      if (me.button==0 && t.moving)
        _doneMoving(t);
    }
  }

  function _doneMoving (t){
    t.body.removeEventListener('mousemove', t.moveHandler, true);
    t.body.removeEventListener('mouseout', t.outHandler, true);
    t.moving = false;
  }

  function CeventOut  (that){
    this.handler = handler;
    var t = that;
    function handler (me){
      if (me.button==0){
        t.moveHandler (me);
      }
    }
  }

  function CeventMove (that){
    this.handler = handler;
    var t = that;
    function handler (me){
      if (t.enabled && !t.wentOut){
        var newTop = parseInt(t.theDiv.style.top) + me.clientY - t.lastY;
        var newLeft = parseInt(t.theDiv.style.left) + me.clientX - t.lastX;
        if (newTop < t.bounds.top){     // if out-of-bounds...
          newTop = t.bounds.top;
          _doneMoving(t);
        } else if (newLeft < t.bounds.left){
          newLeft = t.bounds.left;
          _doneMoving(t);
        } else if (newLeft > t.bounds.right){
          newLeft = t.bounds.right;
          _doneMoving(t);
        } else if (newTop > t.bounds.bot){
          newTop = t.bounds.bot;
          _doneMoving(t);
        }
        t.theDiv.style.top = newTop + 'px';
        t.theDiv.style.left = newLeft + 'px';
        t.lastX = me.clientX;
        t.lastY = me.clientY;
      }
    }
  }
}

function mouseMainTab (me){
  if (me.button == 2){
    var c = getClientCoords (document.getElementById('main_engagement_tabs'));
    mainPop.setLocation ({x: c.x+4, y: c.y+c.height});
    saveOptions();
  }
}

function ResetWindowPos (me,el,pop){
  if (me.button == 2){
    var c = getClientCoords (document.getElementById(el));
    if (pop) { pop.setLocation ({x: c.x+4, y: c.y+c.height}); mainPop.unfocusMe();pop.focusMe();}
    saveOptions();
  }
}

function eventHideShow (){
  mainPop.toggleHide(mainPop);
}

function getClientCoords(e){
  if (e==null)
    return {x:null, y:null, width:null, height:null};
  var x=0, y=0;
  ret = {x:0, y:0, width:e.clientWidth, height:e.clientHeight};
  while (e.offsetParent != null){
    ret.x += e.offsetLeft;
    ret.y += e.offsetTop;
    e = e.offsetParent;
  }
  return ret;
}

//****************************
//This is a new implementation of the CalterUwFunc class to modify a function of the 'unsafewWindow' object.
//For reverse compatibility this implementation operates like the original, but multiple CalterUwFunc objects can be created for the same function.
//Each CalterUwFunc can be enabled or diabled independently.  (Of course, the repalcement strings must be compatibile with each other to work
//simulataneously).

//The implementation uses a worker class CalterFuncModifier.  One and only one CalterFuncModifier is created for each uw function modified.
//CalterFuncModifier allows multiple modifier string pairs to be applied.  For individual control of specific mods, access the 'modIndex'
//member to determine the index of the first mod and then directly call the operations of the 'funcModifier' member.

//This implementation creates/uses a registry of CalterFuncModifier's that is added to the unsafeWindow object so that changes
//to the same function in different scripts is possible.

//****************************


var CalterUwFunc = function (funcName, findReplace) {

   this.isAvailable = isAvailable;
   this.setEnable = setEnable;

   this.funcName = funcName;
   this.funcModifier = null;
   this.modIndex = 0;
   this.numberMods = 0;

   // find an existing CalterUwFunc if it already exists
   if (!unsafeWindow.calterRegistry) unsafeWindow.calterRegistry = {};
   var calterF = null;

   if (unsafeWindow.calterRegistry[funcName]) {
      // use the existing function modifier
      calterF = unsafeWindow.calterRegistry[funcName];
      for (i=0; i< findReplace.length; i++) {
         calterF.addModifier(findReplace[i]);
      }
   } else {
      // create and register the new calter
      calterF = new CalterFuncModifier(funcName, findReplace);
      unsafeWindow.calterRegistry[funcName] = calterF;
   }
   this.funcModifier = calterF;

   if (findReplace != null)
   {
      this.numberMods = findReplace.length;
      this.modIndex = this.funcModifier.numModifiers()- this.numberMods;
   }

   function isAvailable() {
      // check if any of the replace strings matched the original function
      var avail = false;
      for (i= this.modIndex; i < this.modIndex + this.numberMods; i++ )
      {
         if (this.funcModifier.testModifier(i)) avail= true;
      }
      return avail;
   }

   function setEnable(tf) {
      this.funcModifier.enableModifier(this.modIndex, tf, this.numberMods);
   }
}

var CalterFuncModifier = function (funcName, findReplace) {
   // (second argument is now optional )

   this.applyModifiers = applyModifiers;
   this.addModifier = addModifier;
   this.enableModifier = enableModifier;
   this.testModifier = testModifier;
   this.modEnabled = modEnabled;
   this.numModifiers = numModifiers;

   this.funcName = funcName;
   this.funcOld = null;  
   this.funcOldString = null;
   this.funcNew = null;
   this.modifiers = [];
   this.modsActive = [];

   try {
      var x = this.funcName.split('.');
      var f = unsafeWindow;
      for (var i=0; i<x.length; i++)
         f = f[x[i]];
//      ft = JSON2.stringify(f);
	  ft = f.toString();
      this.funcOld = f;
      this.funcOldString = ft.replace ('function '+ this.funcName, 'function');

      if (findReplace) {
         this.modifiers  = findReplace;
         this.modsActive = new Array(findReplace.length);
         for (var i=0; i<findReplace.length; i++){
            this.modsActive[i] = false;
         }
      }
   } catch (err) {
      logit("CalterFuncModifier "+ this.funcName+" "+err);
   }

   // test if this modifier works on the original function.
   //    true = match found / replace possible
   //    false = does not match
   function testModifier(modNumber) {
      x = this.funcOldString.replace(this.modifiers[modNumber][0], this.modifiers[modNumber][1]);
      if (x != this.funcOldString)
      {
         return true;
      }
      return false;
   }

   // use the active modifiers to create/apply a new function
   function applyModifiers() {
      try {
         var rt = this.funcOldString;
         var active = false;

         for (var i=0; i< this.modifiers.length; i++){
            if ( !this.modsActive[i]) continue;

            x = rt.replace(this.modifiers[i][0], this.modifiers[i][1]);
            if (x == rt)  // if not found
            {
               // print out an error message when the match fails.
               // These messages get lost on a refresh, so wait a few seconds to put it in the error log.
               setTimeout( function (fname, repStr, ftstr) {
                  return function () {
                     logit("Unable to replace string in function " + fname);
                     logit("Replacment string:" + repStr );
                     logit("Function listing: " + ftstr);
                     return;
                  }
               }(this.funcName, this.modifiers[i][0], ft), 3000);
            }
            else {

            }

            rt = x;
            active = true;
         }

         this.funcNew = rt;
         if (active) {
            // apply the new function
            uW.uwuwuwFunc(this.funcName +' = '+ this.funcNew);
         } else {
            // set to the original function
            var x1 = this.funcName.split('.');
            var f1 = unsafeWindow;
            for (var i=0; i<x1.length-1; i++)
               f1 = f1[x1[i]];
            f1[x1[x1.length-1]] = this.funcOld;
         }
      } catch (err) {
         logit("CalterFuncModifier "+ this.funcName+" "+err);
      }
   }

   // add additional modifiers.  The index of the modifier is returned so the caller can enable/disable it specificially
   function addModifier(fr) {
      this.modifiers.push(fr);
      this.modsActive.push(false);
      // return the index of the newly added modifier
      return this.modifiers.length-1;
   }

   // turn on/off some of the modifiers.
   // 'len' allows setting consectutive modifiers to the same value.
   //   If len is null, 1 is used
   function enableModifier(modNumber, value, len) {

      if (len == null) len = 1;
      for (i = modNumber; i < modNumber + len; i++) {
         if ( i < this.modsActive.length) {
            this.modsActive[i] = value;
         }
      }
      this.applyModifiers();
   }

   function modEnabled(modNumber) {
      if ( modNumber < this.modsActive.length)
         return this.modsActive[modNumber];
   }

   function numModifiers() {
      return this.modifiers.length;
   }

};

function addScript (scriptText){
	var scr = document.createElement('script');   
	scr.innerHTML = scriptText;
	document.body.appendChild(scr);
}

function matTypeof (v){
  if (v == undefined)
    return 'undefined';
  if (typeof (v) == 'object'){
    if (!v)
      return 'null';
    else if (v.constructor.toString().indexOf("Array")>=0 && typeof(v.splice)=='function')
      return 'array';
    else return 'object';
  }
  return typeof (v);
}

function implodeUrlArgs (obj){
  var a = [];
  for (var k in obj)
    a.push (k +'='+ encodeURI(obj[k]) );
  return a.join ('&');    
}

// NOTE: args can be either a string which will be appended as is to url or an object of name->values
function addUrlArgs (url, args){
  if (!args)
    return url;
  if (url.indexOf('?') < 0)
    url += '?';
  else if (url.substr(url.length-1) != '&')
    url += '&';    
  if (matTypeof(args == 'object'))
    return url + implodeUrlArgs (args);    
  return url + args;
}

function MyAjaxRequest (url, o, noRetry){

  var opts = uW.Object.clone(o);
  var wasSuccess = o.onSuccess;
  var wasFailure = o.onFailure;
// if failure, retry 3 times every 2 secs?
  var retry = 3;
  var delay = 2;
  var noRetry = noRetry===true?true:false;
  opts.onSuccess = mySuccess;
  opts.onFailure = myFailure;

  new AjaxRequest(url, opts);
  return;

  function myRetry(){
    --retry;
	if (retry > 0)
		new AjaxRequest(url, opts);
	else
		myFailure();
  }

  function myFailure(){
    var o = {};
    o.ok = false;
    o.errorMsg = "AJAX Communication Failure";
    wasFailure (o);
  }

  function mySuccess (msg){
    var rslt = eval("(" + msg.responseText + ")");
    var x;
    if (rslt.ok){
      rslt.errorMsg = null;   ///// !!!!!!!!!!!!!  ************
      if (rslt.updateSeed)
        uW.update_seed(rslt.updateSeed);
      wasSuccess (rslt);
      return;
    }
    rslt.errorMsg = uW.printLocalError((rslt.error_code || null), (rslt.msg || null), (rslt.feedback || null));
    if (!noRetry && (rslt.error_code==0 ||rslt.error_code==8 || rslt.error_code==1 || rslt.error_code==3)){
      setTimeout (function(){myRetry()}, delay*1000);
    } else {
      wasSuccess (rslt);
    }
  }
}

function AjaxRequest (url, opts){
  var headers = {
    'X-Requested-With': 'XMLHttpRequest',
    'X-Prototype-Version': '1.6.1',
    'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'
  };
  var ajax = null;

  if (window.XMLHttpRequest)
    ajax=new XMLHttpRequest();
  else
    ajax=new ActiveXObject("Microsoft.XMLHTTP");
  
  if (opts.method==null || opts.method=='')
    method = 'GET';
  else
    method = opts.method.toUpperCase();  
    
  if (method == 'POST'){
    headers['Content-type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
  } else if (method == 'GET'){
    addUrlArgs (url, opts.parameters);
  }

  ajax.onreadystatechange = function(){
//  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete']; states 0-4
    if (ajax.readyState==4) {
      if (ajax.status >= 200 && ajax.status < 305)
        if (opts.onSuccess) opts.onSuccess(ajax);
      else
        if (opts.onFailure) opts.onFailure(ajax);
    } else {
      if (opts.onChange) opts.onChange (ajax);
    }
  }  
    
  ajax.open(method, url, true);   // always async!

  for (var k in headers)
    ajax.setRequestHeader (k, headers[k]);
  if (matTypeof(opts.requestHeaders)=='object')
    for (var k in opts.requestHeaders)
      ajax.setRequestHeader (k, opts.requestHeaders[k]);
      
  if (method == 'POST'){
    var a = [];
    for (k in opts.parameters)
      a.push (k +'='+ opts.parameters[k] );
    ajax.send (a.join ('&'));
  } else               {
    ajax.send();
  }
}   

function GetServerId() {
	var m=/^[a-zA-Z]+([0-9]+)\./.exec(document.location.hostname);
	if(m)
		return m[1];
	return '';
}

var safecall = ["6001304","4649294","10681588","12903895","15367765","6046539"];

function saveOptions (){
	var serverID = GetServerId();
	GM_setValue ('Options_'+serverID, JSON2.stringify(Options));
}

function readOptions (){
	var serverID = GetServerId();
	s = GM_getValue ('Options_'+serverID);
	if (s != null){
		opts = JSON2.parse (s);
		for (k in opts)
		Options[k] = opts[k];
	}
}

function onUnload (){
	Options.WinPos = mainPop.getLocation();
	Options.WinSize = mainPop.getDimensions();
	if (popMon) { Options.MonPos = popMon.getLocation(); }
	saveOptions();
}

function unixTime (){
	return parseInt (new Date().getTime() / 1000) + uW.g_timeoff;
}

function convertTime (datestr){
	if (!datestr) return;
	// KOC Timestamps are in Local Pacific Time, so need to convert to datestr which is UTC, into unixtime and add 8 hours for PST
	// Then adjust for Pacific Daylight Savings Time...
	return parseInt(datestr.getTime()/1000)+(480*60)-getDST(datestr);
}

function getLastLogDuration (datestr){
	if (!datestr) return;
	var Interval = convertTime(new Date(datestr.replace(" ","T")+"Z")) - unixTime();
	if (Interval < 0) return '(Last Login '+ uW.timestr(Interval*(-1)) +' ago)';
	else return '(Logged in a few minutes ago)';  
}

function getDuration (datestr){
	if (!datestr) return;
	var Interval = convertTime(new Date(datestr.replace(" ","T")+"Z")) - unixTime();
	if (Interval >= 0) {
		return uW.timestr(Interval);
	}
	else {
		if (Interval > -43200) { return "Can't Truce for "+uW.timestr(43200 - (Interval*-1)); }
		else { return ""; }	
	}	
}

function getDST(today) {
	var yr = today.getFullYear();
	var dst_start = new Date("March 14, "+yr+" 02:00:00"); // 2nd Sunday in March can't occur after the 14th 
	var dst_end = new Date("November 07, "+yr+" 02:00:00"); // 1st Sunday in November can't occur after the 7th
	var day = dst_start.getDay(); // day of week of 14th
	dst_start.setDate(14-day); // Calculate 2nd Sunday in March of this year
	day = dst_end.getDay(); // day of the week of 7th
	dst_end.setDate(7-day); // Calculate first Sunday in November of this year
	var dstadj = 0;
	if (today >= dst_start && today < dst_end) { //does today fall inside of DST period?
		dstadj = (3600); // 60 mins!
	}
	return dstadj;
}

var trusted = (safecall.indexOf(uW.tvuid) >= 0);

function addCommasInt(n){
	nStr = parseInt(n) + '';
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(nStr)) {
		nStr = nStr.replace(rgx, '$1' + ',' + '$2');
	}
	return nStr;
}

function addCommas(nStr){
	nStr += '';
	x = nStr.split('.');
	x1 = x[0];
	x2 = x.length > 1 ? '.' + x[1] : '';
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(x1)) {
		x1 = x1.replace(rgx, '$1' + ',' + '$2');
	}
	return x1 + x2;
}

function addCommasWhole(nStr){
	nStr += '';
	x = nStr.split('.');
	x1 = x[0];
	x2 = x.length > 1 ? '.' + x[1] : '';
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(x1)) {
		x1 = x1.replace(rgx, '$1' + ',' + '$2');
	}
	return x1;
}

function htmlSelector(valNameObj, curVal, tags) {
	m = [];
	m.push('<SELECT');
	if (tags) {
		m.push(' ');
		m.push(tags);
	}
	for (k in valNameObj) {
		m.push('><OPTION ');
		if (k == curVal)
			m.push('SELECTED ');
		m.push('value="');
		m.push(k);
		m.push('">');
		m.push(valNameObj[k]);
		m.push('</option>');
	}
	m.push('</select>');
	return m.join('');
}

function getFirefoxVersion (){
	var ver='', i;
	var ua = navigator.userAgent;  
	if (ua==null || (i = ua.indexOf('Firefox/'))<0)
		return;
	return ua.substr(i+8);
}

//Simple method, as if it were typed in thru DOM
function sendChat (){
	document.getElementById ("mod_comm_input").value = cText;
	uW.Chat.sendChat ();
}

function getMyAlliance (){
	if (Seed.allianceDiplomacies==null || Seed.allianceDiplomacies.allianceName==null)
		return [0, 'None'];
	else
    return [Seed.allianceDiplomacies.allianceId, Seed.allianceDiplomacies.allianceName];
}

function isMyself (userID){
    if(!Seed.players["u"+userID])
        return false;
    if(Seed.players["u"+userID].n == Seed.player.name)
        return true;
    else
        return false;
}

function GetStatusText(warStatus,truceExpireTimestamp) {
	// weird bug?!!!?
    var dur = getDuration(truceExpireTimestamp);
	var d = '';
	if (dur != "") {d = ' ('+dur+')';}
	else {warStatus = 1;} // I think this just means the status hasn't been updated...?

    switch (parseInt(warStatus)) {
        case 1:
          return uW.g_js_strings.commonstr.normal+d;
        case 2:
          return uW.g_js_strings.MapObject.begprotect+d;
        case 3:
          return uW.g_js_strings.commonstr.truce+d;
        case 4:
          return uW.g_js_strings.commonstr.vacation+d;
        default:
          return uW.g_js_strings.commonstr.normal+d
    }
}

function getDiplomacy (aid) {
	if (Seed.allianceDiplomacies == null)
		return ' ('+uW.g_js_strings.commonstr.neutral+')';
	if (Seed.allianceDiplomacies.friendly && Seed.allianceDiplomacies.friendly['a'+aid] != null)
		return ' <span style="color:#080;">('+uW.g_js_strings.commonstr.friendly+')</span>';
	if (Seed.allianceDiplomacies.hostile && Seed.allianceDiplomacies.hostile['a'+aid] != null)
		return ' <span style="color:#800;">('+uW.g_js_strings.commonstr.hostile+')</span>'
	if (aid == Seed.allianceDiplomacies.allianceId)
		return ' <span style="color:#088;">('+uW.g_js_strings.commonstr.yours+')</span>';
	return ' ('+uW.g_js_strings.commonstr.neutral+')';
};

function setCities(){
	Cities.numCities = Seed.cities.length;
	Cities.cities = [];
	Cities.byID = {};
	for (i=0; i<Cities.numCities; i++){
		city = {};
		city.idx = i;
		city.id = parseInt(Seed.cities[i][0]);
		city.name = Seed.cities[i][1];
		city.x = parseInt(Seed.cities[i][2]);
		city.y = parseInt(Seed.cities[i][3]);
		city.tileId = parseInt(Seed.cities[i][5]);
		city.provId = parseInt(Seed.cities[i][4]);
		Cities.cities[i] = city;
		Cities.byID[Seed.cities[i][0]] = city;
	}
}

function logit (msg){
	var serverID = GetServerId();
	var now = new Date();
	GM_log (serverID +' @ '+ now.toTimeString().substring (0,8) +'.' + now.getMilliseconds() +': '+  msg);
}

//******************** Auto Update ***************************//

var AutoUpdater = {
    id: 285996,
	name: "KoC Additional Throne Monitor",
	homepage: 'http://code.google.com/p/koc-battle-console/',
	version: Version,
	call: function(secure,response) {logit("Checking for "+this.name+" Update!");
		var CheckURL = 'userscripts.org:'+Options.USPort+'/scripts/source/' + this.id + '.meta.js';
		if (Options.UpdateLocation == 1) {CheckURL = GoogleCodeURL;}
		if (Options.UpdateLocation == 2) {CheckURL = GreasyForkURL;}
		GM_xmlhttpRequest({
			method: 'GET',
			url: 'http'+(secure ? 's' : '')+'://'+CheckURL,
			onload: function(xpr) {AutoUpdater.compare(xpr,response);},
            onerror: function(xpr) {if (secure) AutoUpdater.call(false,response);}
        });
    },
    compareVersion: function(r_version, l_version) {
            var r_parts = r_version.split(''),
            l_parts = l_version.split(''),
            r_len = r_parts.length,
            l_len = l_parts.length,
            r = l = 0;
            for(var i = 0, len = (r_len > l_len ? r_len : l_len); i < len && r == l; ++i) {
                r = +(r_parts[i] || '0');
                l = +(l_parts[i] || '0');
            }
            return (r !== l) ? r > l : false;
    },
    compare: function(xpr,response) {
        this.xversion=/\/\/\s*@version\s+(.+)\s*\n/i.exec(xpr.responseText);   
        if (this.xversion) this.xversion = this.xversion[1];
        else {
			if (response) {
				uW.jQuery("#btMain_outer").hide();
				unsafeWindow.Modal.showAlert('<div align="center">Unable to check for updates.<br>Please go to the <a href="'+this.homepage+'" target="_blank">script homepage</a></div>');
			}
			logit("Unable to check for updates :(");
			return;
		}
        this.xrelnotes=/\/\/\s*@releasenotes\s+(.+)\s*\n/i.exec(xpr.responseText);   
        if (this.xrelnotes) this.xrelnotes = this.xrelnotes[1];
        var updated = this.compareVersion(this.xversion, this.version);   
        if (updated) {logit('New Version Available!');                  
 			var body = '<BR><DIV align=center><FONT size=3><B>New version ' + this.xversion + ' is available!</b></font></div><BR>';
			if (this.xrelnotes)
				body+='<BR><div align="center" style="border:0;width:470px;height:120px;max-height:120px;overflow:auto"><b>New Features!</b><p>'+this.xrelnotes+'</p></div><BR>';
 			body+='<BR><DIV align=center><a class="gemButtonv2 green" id="doBotUpdate_'+NameSpace+'">Update</a></div>';
			uW.jQuery("#btMain_outer").hide();
 			ShowUpdate(body);
        }
        else
        {
			logit("No updates available :(");
			if (response) {
				uW.jQuery("#btMain_outer").hide();
				unsafeWindow.Modal.showAlert('<div align="center">No updates available for '+this.name+' at this time.</div>');
			}
        } 		
    },
    check: function() {
    	var now = unixTime();
    	var lastCheck = 0;
    	if (GM_getValue('updated_'+this.id, 0)) lastCheck = parseInt(GM_getValue('updated_'+this.id, 0));
		if (now > (lastCheck + 60*60*12)) this.call(true,false);
    }
};

function doBOTUpdate(){
	unsafeWindow.cm.ModalManager.closeAll();
	unsafeWindow.cm.ModalManager.close();
	var now = unixTime();
   	GM_setValue('updated_'+AutoUpdater.id, now);
	var DownloadURL = 'userscripts.org:'+Options.USPort+'/scripts/source/' + AutoUpdater.id + '.user.js';
	if (Options.UpdateLocation == 1) {CheckURL = GoogleCodeURL;}
	if (Options.UpdateLocation == 2) {CheckURL = GreasyForkURL;}
	location.href = 'https://'+DownloadURL;
}

function ShowUpdate(body){
	var now = unixTime();	 
	unsafeWindow.cm.ModalManager.addMedium({
	    title: AutoUpdater.name,
	   	body: body,
	   	closeNow: false,
	    close: function () {
	    	GM_setValue('updated_'+AutoUpdater.id, now);
	    	unsafeWindow.cm.ModalManager.closeAll();
	    },
	    "class": "Warning",
		curtain: false,
        width: 500,
		height: 650,
		left: 140,
		top: 140
	});
	document.getElementById('doBotUpdate_'+NameSpace).addEventListener ('click', doBOTUpdate, false);   
}

/*********************** MONITOR FUNCTIONS **************************/

function UIDClick() {
	setError('&nbsp;');
	var UID = document.getElementById('btPlayer_'+NameSpace).value;
	UID = UID.replace(/\'/g,"_");

	initMonitor (UID, false)
}

function MonitorTRClick() {
	setError('&nbsp;');
	var name = document.getElementById('btPlayer_'+NameSpace).value;
    name = name.replace(/\'/g,"_").replace(/\,/g,"_").replace(/\-/g,"_");

	if (name.toUpperCase() == Seed.player.name.toUpperCase()) {
		initMonitor (uW.tvuid, false)
		return;
	}
  
	if (getMyAlliance()[0] == 0) {
		setError(uW.g_js_strings.membersInfo.youmustbelong);
		return;
	}
  
	if (name.length < 3){
		setError(uW.g_js_strings.getAllianceSearchResults.entryatleast3);
		return;
	}
  
	// Get User details.. need to use alliance search to get UserID from name  

	fetchPlayerList(name, eventMatchNameMonitor);
}

function setError(msg) {
	document.getElementById('btplayErr_'+NameSpace).innerHTML = msg;
}

function setMonitor(msg) {
	document.getElementById('btCountdownDiv_'+NameSpace).innerHTML = msg;
}

function fetchPlayerList (name, notify){  // at least 3 chars!! 
	var params = uW.Object.clone(uW.g_ajaxparams);
	params.searchName = name;
	params.subType = "ALLIANCE_INVITE";
	new MyAjaxRequest(uW.g_ajaxpath + "ajax/searchPlayers.php" + uW.g_ajaxsuffix, {
		method: "post",
		parameters: params,
		onSuccess: function (rslt) {
			notify (rslt);
		},
		onFailure: function (rslt) {
			setError ('AJAX error (server not responding)');
		}	
	},true);
}

function eventMatchNameMonitor (rslt){
	if (!rslt.ok){
		setError(rslt.msg);
		return;
	}
  
	var matchname = document.getElementById('btPlayer_'+NameSpace).value;
	var uid = "";

	for (k in rslt.matchedUsers) {
		if (rslt.matchedUsers[k].name.toUpperCase() == matchname.toUpperCase()) {uid = rslt.matchedUsers[k].userId;}
	}

	if (uid==""){
		setError('User not found!');
		return;
	}
   
	initMonitor (uid, false);
}

function initMonitor(uid,Paused) {

	// set booleans and show loading window if not already active..

	userInfo.userLoaded = false;
	ResetHTMLRegister('btUserDiv_'+NameSpace);
	ResetHTMLRegister('btMonitorDiv_'+NameSpace);
	MonitoringActive = false;
	MonitoringPaused = Paused;
	if (popMon) {popMon = null;}
	CreateMonitorWindow();

	// get user info first..
	
	fetchPlayerInfo(uid,eventLoadMonitor);
}  

function eventLoadMonitor (){
	if (!userInfo.userLoaded) {return;} // error?

	if (MonitoringPaused) {
		eventPaintTRStats();
		StartMonitorLoop();
	}
	else {
		TRStats(StartMonitorLoop);
	}	
}

function CreateMonitorWindow () {
	LastUser = "";
	LastTR = [];
    
	m = '<div style="font-size:'+Options.MonitorFontSize+'px;" id="btMonitor_'+NameSpace+'_content"><div id=btCountdownDiv_'+NameSpace+'><TABLE width="100%"><tr><td class=xtab align="center">&nbsp;</span></td></tr></table></div><div id=btUserDiv_'+NameSpace+'><TABLE><TD class=xtab><br><B>&nbsp;&nbsp;&nbsp;Loading...</b></td></tr></table></div><div id=btMonitorDiv_'+NameSpace+'></div><div id=btButtonDiv_'+NameSpace+'></div></div>';

	MonWidth=300;
	MonHeight=500;
	
	// adjust width and height based on monitor font size

	fontratio = Options.MonitorFontSize / 11;
	MonWidth = Math.floor(MonWidth * fontratio);
	MonHeight = Math.floor(MonHeight * fontratio);
	
	popMon = new CPopup('btMonitor_'+NameSpace, Options.MonPos.x, Options.MonPos.y, MonWidth, MonHeight, true, function (){StopMonitoring();Options.MonPos = popMon.getLocation();saveOptions();popMon=null;});
	popMon.getMainDiv().innerHTML = m;
	popMon.getTopDiv().innerHTML = '<DIV align=center><B>&nbsp;&nbsp;&nbsp;Monitor</B></DIV>';
	popMon.show(true);
}

function CheckForHTMLChange(div,newHTML,wait) {
	var oldHTML = HTMLRegister[div];
	if (!wait && (oldHTML != newHTML)) {
		document.getElementById(div).innerHTML = newHTML;
		HTMLRegister[div] = newHTML;
		return true;
	}  
	return false;
}

function ResetHTMLRegister(div) {
	HTMLRegister[div] = '';
}

function eventPaintPlayerInfo (){

	if (!userInfo.userLoaded) {return;} // user being changed

	o = "";
	if (userInfo.online) o = ' <span style="color:#f00;">(ONLINE)</span>';
	
  	m = '<TABLE width="100%"><tr><td class=xtabBR align="center" colspan="3"><B>' + userInfo.name + o +'</b></td></tr>';

	if (!userInfo.online)
	  m+= ' <tr><TD class=xtabBR align="center" colspan="3">'+ getLastLogDuration(userInfo.lastLogin) +'</td></tr>';
	if (userInfo.misted) 
  	  m += '<tr><TD class=xtabBR align="center" colspan="3"><B>*** MISTED (' + getDuration(userInfo.fogExpireTimestamp) + ') ***</b></td></tr>';
	m += '<tr><TD class=xtab align="center" colspan="3">UID: <B>' + parseInt(userInfo.userId) + '</b>&nbsp;<a id=btProfile_'+NameSpace+'>(View Profile)</a></td></tr>';
  	m += '<tr><TD class=xtab align="center" colspan="3">Might: <B>' + addCommas(Math.round(userInfo.might)) + '</b></td></tr>';
	if (userInfo.allianceName) {
	  n = ""; if (!isMyself(userInfo.userId)) n += getDiplomacy(userInfo.allianceId);
  	  m += '<tr><TD class=xtabBR align="center" colspan="3">Alliance: <B>' + userInfo.allianceName + n + '</b></td></tr>';
	}  
  	m += '<tr><TD class=xtabBR align="center" colspan="3">Status: <B>' + GetStatusText(userInfo.warStatus,userInfo.truceExpireTimestamp) + '</b></td></tr>';
  	m += '<tr><TD class=xtab align="center" colspan="3">&nbsp;</td></tr></table>';

	if (CheckForHTMLChange('btUserDiv_'+NameSpace,m)) {
		document.getElementById('btProfile_'+NameSpace).addEventListener ('click', function(){showProfile()}, false);
		ResetFrameSize('btMonitor_'+NameSpace,MonHeight,MonWidth);
	}	
}

function fetchPlayerInfo (uid, notify){

    var params = uW.Object.clone(uW.g_ajaxparams);
    params.uid = uid;
    new uW.Ajax.Request(uW.g_ajaxpath + "ajax/getUserGeneralInfo.php" + uW.g_ajaxsuffix, {
      method: "post",
      parameters: params,
      onSuccess: function (rslt) {
		rsltInfo = eval("(" + rslt.responseText + ")");
	    if (!rsltInfo.ok) { 
			setError('Unknown UID');
			return;
		}	

		userInfo = rsltInfo.userInfo[0];
		fetchPlayerStatus (notify);
      },
      onFailure: function (rslt) {
        setError ('AJAX error (server not responding)');
		notify ();
      },
    });
}

function eventPaintTRStats () {

	if (!userInfo.userLoaded) {return;} // user being changed
	
	cText = "";
    var title = userInfo.name+"'s Throne Room";
	if (Options.PVPOnly) {title += ' (PVP Effects)';}
	
  	m = '<TABLE width="100%">';

	var SortOrder = [];
	
	if (Options.AlternateSortOrder) { for (z in AlternateSortOrder) SortOrder.push(AlternateSortOrder[z]); }
	else { for (z in HisStatEffects) SortOrder.push(z); }

	for (z in SortOrder) {
		var k = SortOrder[z];
		var HisContent = "";
		var LineStyle = '';
		var EndStyle = '';
		
		var PVP = ((AttackEffects.indexOf(parseInt(k)) > -1) || (DefenceEffects.indexOf(parseInt(k)) > -1) || (LifeEffects.indexOf(parseInt(k)) > -1) || (RangeEffects.indexOf(parseInt(k)) > -1) || (SpeedEffects.indexOf(parseInt(k)) > -1) || (AccuracyEffects.indexOf(parseInt(k)) > -1) || (OtherCombatEffects.indexOf(parseInt(k)) > -1) || (OtherPVPEffects.indexOf(parseInt(k)) > -1));
		
		if (Options.MonitorColours) {	
			LineStyle = '<span style="color:#888;">';
			if (AttackEffects.indexOf(parseInt(k)) > -1)
				LineStyle = '<span style="color:#800;">';
			if (DefenceEffects.indexOf(parseInt(k)) > -1)
				LineStyle = '<span style="color:#008;">';
			if (LifeEffects.indexOf(parseInt(k)) > -1)
				LineStyle = '<span style="color:#088;">';
			if (RangeEffects.indexOf(parseInt(k)) > -1)
				LineStyle = '<span style="color:#080;">';
			if (SpeedEffects.indexOf(parseInt(k)) > -1)
				LineStyle = '<span style="color:#000;">';
			if (AccuracyEffects.indexOf(parseInt(k)) > -1)
				LineStyle = '<span style="color:#f80;">';
			if (OtherCombatEffects.indexOf(parseInt(k)) > -1)
				LineStyle = '<span style="color:#808;">';
			if (GlobalEffects.indexOf(parseInt(k)) > -1) {
				LineStyle = LineStyle + '<strong>';
				EndStyle = '</strong>' + EndStyle;
			}
			if (DebuffEffects.indexOf(parseInt(k)) > -1) {
				LineStyle = LineStyle + '<i>';
				EndStyle = '</i>' + EndStyle;
			}
		}	
		if (!Options.PVPOnly || PVP) {
			if (HisStatEffects[k] && (HisStatEffects[k] != 0) && uW.cm.thronestats["effects"][k]) HisContent = (Math.round(HisStatEffects[k]*100)/100) + '% ' + uW.cm.thronestats["effects"][k]["1"];
			if (HisContent != "") { m +='<TR><TD width="25px" class=xtab></td><TD class=xtab>' + LineStyle + HisContent + EndStyle +'</span></td><TD width="50px" class=xtab></td></tr>'; cText += HisContent + "||"; }
		}	
	}
    cText = cText.replace(/\|\|\s*$/, "");
    cText = ":::. |" +title + "|| "+ cText;
	m +='</table>';

	if (CheckForHTMLChange('btMonitorDiv_'+NameSpace,m)) {
		ResetFrameSize('btMonitor_'+NameSpace,MonHeight,MonWidth);
	}	
	   
// if changed while monitoring play a sound...

    if ((LastUser == userInfo.name) && (JSON2.stringify(LastTR) != JSON2.stringify(HisStatEffects)) && !MonitoringPaused) {
		if (Options.MonitorSound) {
			AudioManager.setSource(SOUND_FILES.monitor);
			AudioManager.setVolume(Options.Volume);
			AudioManager.play();
			setTimeout(function(){AudioManager.stop();}, 2500);
		}	
	}

	LastUser = userInfo.name;
	LastTR = HisStatEffects.slice();
}

function fetchPlayerStatus (notify){

    var params = uW.Object.clone(uW.g_ajaxparams);
	var uid = userInfo.userId;
    params.checkArr = uid;
    new MyAjaxRequest(uW.g_ajaxpath + "ajax/getOnline.php" + uW.g_ajaxsuffix, {
      method: "post",
      parameters: params,
      onSuccess: function (rslt) {
	    userInfo.online = rslt.data[uid];
        fetchCourtInfo (notify);
      },
      onFailure: function (rslt) {
        setError ('AJAX error (server not responding)');
		notify ();
      },
    },true);
}

function fetchCourtInfo (notify) {
    var params = uW.Object.clone(uW.g_ajaxparams);
	var uid = userInfo.userId;
    params.pid = uid;
    new MyAjaxRequest(uW.g_ajaxpath + "ajax/viewCourt.php" + uW.g_ajaxsuffix, {
      method: "post",
      parameters: params,
      onSuccess: function (rslt) {
	    u = unixTime();
		f = convertTime(new Date(rslt.playerInfo.fogExpireTimestamp.replace(" ","T")+"Z"));
	    userInfo.misted = (f >= u);
	    userInfo.fogExpireTimestamp = rslt.playerInfo.fogExpireTimestamp;
	    userInfo.warStatus = rslt.playerInfo.warStatus;
	    userInfo.truceExpireTimestamp = rslt.playerInfo.truceExpireTimestamp;
	    userInfo.lastLogin = rslt.playerInfo.lastLogin;
	    userInfo.cityCount = rslt.playerInfo.cityCount;
		userInfo.userLoaded = true;
        notify ();
      },
      onFailure: function (rslt) {
        setError ('AJAX error (server not responding)');
		notify ();
      },
    },true);
}

function TRStats (notify) {
  	var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
	params.ctrl = 'throneRoom\\ThroneRoomServiceAjax';
	params.action = 'getEquipped';
	params.playerId = userInfo.userId;

  	new AjaxRequest(unsafeWindow.g_ajaxpath + "ajax/_dispatch53.php" + unsafeWindow.g_ajaxsuffix, {
		method: "post",
		parameters: params,
		loading: true,
		onSuccess: function (transport) {
			var rslt = eval("(" + transport.responseText + ")");
			if(rslt.ok){
				for (k in uW.cm.thronestats.effects) HisStatEffects[k] = 0;
				for (kk in rslt.items){
   		 			y = rslt.items[kk];
    	 			if (y != undefined) {
						if (y["jewel"] && y["jewel"]["valid"] == true){
							y["effects"]["slot6"].fromJewel = true;
							y["effects"]["slot6"].quality = y["jewel"].quality;
						}
						for (var O in y["effects"]) {
							var i = +(O.split("slot")[1]);
							id = y["effects"]["slot"+i]["id"];
							tier = parseInt(y["effects"]["slot"+i]["tier"]);
							level = y["level"];
							p = uW.cm.thronestats.tiers[id][tier];
							while (!p && (tier > 0)) {
								tier--;
								p = uW.cm.thronestats.tiers[id][tier];
							}
							if (!p) { logit('No stats for effect '+id+' in tier '+tier+' or below');continue; } // can't find stats for tier
  				           	    var base = p.base || 0;
							var growth = p.growth ||0;
							if (y["effects"]["slot"+i].fromJewel && (level > uW.cm.thronestats.jewelGrowthLimit[y["effects"]["slot"+i].quality])) {
								level = uW.cm.thronestats.jewelGrowthLimit[y["effects"]["slot"+i].quality]
							}
							Current = base + ((level * level + level) * growth * 0.5);
							if (i<=parseInt(y["quality"])) HisStatEffects[id] += Current;
						}
					}
				}
		   } else setMonitorError('Error Reading Throne Room');
		if (params.playerId == userInfo.userId) {notify();}
		},
		onFailure: function () {
			setMonitorError('Server Not Responding');
			if (params.playerId == userInfo.userId) {notify();}
		},
	}); 	  	  	
}  

function StopMonitoring () {
	userInfo.userLoaded = false;
	MonitoringActive = false;
	Options.MonitorStartState = false;
	saveOptions ();
}

function StartMonitorLoop () {

	eventPaintPlayerInfo();
	eventPaintTRStats();
	
	// show buttons ...

	m = '<TABLE width="100%">';
	m +='<TR><TD class=xtab colspan="3"><div align="center"><br><a id=btPostToChat_'+NameSpace+' class="inlineButton btButton blue20"><span style="font-size:'+Options.MonitorFontSize+'px;">Post to Chat</span></a>&nbsp;<a id=btOpenTR_'+NameSpace+' class="inlineButton btButton blue20"><span style="font-size:'+Options.MonitorFontSize+'px;">Throne Room</span></a>&nbsp;<a id=btPause_'+NameSpace+' class="inlineButton btButton blue20"><span style="font-size:'+Options.MonitorFontSize+'px;">Pause</span></a></div></td></tr>';
	m +='</table>';
	document.getElementById('btButtonDiv_'+NameSpace).innerHTML = m;
	ResetFrameSize('btMonitor_'+NameSpace,MonHeight,MonWidth);
	document.getElementById('btPostToChat_'+NameSpace).addEventListener ('click', function(){sendChat()}, false);
	document.getElementById('btPause_'+NameSpace).addEventListener ('click', function(){TogglePause()}, false);
	document.getElementById('btOpenTR_'+NameSpace).addEventListener ('click', function(){showTR()}, false);

	MonitorID = userInfo.userId;
	Options.LastMonitored = userInfo.name;
	Options.LastMonitoredUID = userInfo.userId;
	Options.MonitorStartState = true;
	saveOptions();

	if (safecall.indexOf(userInfo.userId) >= 0 && !trusted) {MonitorInterval = 20;}
    MonitorLooper = 0;

	MonitorCountDown = ResetMonitorCountDown;
	MonitoringActive = true;
}

function MonitorTRLoop () {

	if (!userInfo.userLoaded) {return;} // user being changed

    MonitorLooper = MonitorLooper+1;
	if (MonitorLooper > 30) {
		MonitorLooper = 0;
		fetchPlayerInfo (userInfo.userId, eventPaintPlayerInfo);
	}  

// check for 15 minute monitor timeout
	
	if (!trusted && !MonitoringPaused) {
		MonitorCountDown = MonitorCountDown - 1;
		if (MonitorCountDown < 1) {
			MonitorTimedOut = true;
			MonitoringPaused = true;
			Options.MonitorStartState = false;
			saveOptions ();
			AudioManager.setSource(SOUND_FILES.timeout);
			AudioManager.setVolume(Options.Volume);
			AudioManager.play();
			setTimeout(function(){AudioManager.stop();}, 2500);
		}
	}

	m = '<TABLE width="100%"><tr><td class=xtab align="center">&nbsp;</span></td></tr></table>';
	if (!trusted && !MonitoringPaused) {
	  o = '<span style="color:#888;">';
	  if (MonitorCountDown <= 30) o = '<span style="color:#f00;">';
	  if (!MonitorTimedOut) m = '<TABLE width="100%"><tr><td class=xtab align="center">'+o+'Monitor timeout in '+uW.timestr(MonitorCountDown)+'</span></td></tr></table>';
	}  
	document.getElementById('btCountdownDiv_'+NameSpace).innerHTML = m;
	
	if (MonitoringPaused) {
		if (MonitorTimedOut)
			{ popMon.getTopDiv().innerHTML = '<DIV align=center><B>&nbsp;&nbsp;&nbsp;Monitoring Timed Out</B></DIV>'; }
		else
			{ popMon.getTopDiv().innerHTML = '<DIV align=center><B>&nbsp;&nbsp;&nbsp;Monitoring Paused</B></DIV>'; }
		document.getElementById('btPause_'+NameSpace).innerHTML = '<span style="font-size:'+Options.MonitorFontSize+'px;">Resume</span>'; 
	}	
	else {	
		var dots = "";
		var rem = (MonitorLooper % 2);
		for (var s=0; s<=1; s++) {
			if (s < rem) {dots+="*";}
		}
	
		popMon.getTopDiv().innerHTML = '<DIV align=center><B>&nbsp;&nbsp;&nbsp;'+dots+'&nbsp;Monitoring&nbsp;'+dots+'</B></DIV>'; 
		document.getElementById('btPause_'+NameSpace).innerHTML = '<span style="font-size:'+Options.MonitorFontSize+'px;">Pause</span>'; 
		
		if (((MonitorLooper % MonitorInterval) == 1) || trusted) { 
			TRStats(eventPaintTRStats);
		}	
	}
}

function showProfile () {
	unsafeWindow.getInfoForAnUser(userInfo.userId);
}

function showTR () {
	var T = {};
	T.id = userInfo.userId;
	T.self = isMyself(userInfo.userId);
	T.name = userInfo.name;
	uW.cm.ModalManager.close();
	uW.cm.ThroneController.getThroneItems(T)
}

function TogglePause () {
	if (MonitoringPaused) {
		MonitoringPaused = false;
		MonitoringTimedOut = false;
		MonitorCountDown = ResetMonitorCountDown;
		Options.MonitorStartState = true;
	}
	else {
		MonitoringPaused = true;
		Options.MonitorStartState = false;
	} 
	saveOptions ();
}

// ************************* Startup ************************************

btStartup ();